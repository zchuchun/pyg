
<template>
  <Address>
    <view class="address-info">
      <block wx:if="{{address}}">
        <view class="item space-between">
          <view class="col">
            <text class="note">收货人：</text>
            <text class="detail">{{address.userName}}</text>
          </view>
          <view class="col">
            <text class="address-phone">{{address.telNumber}}</text>
            <view class="iconfont icon-jiantouyou"></view>
          </view>
        </view>
        <view class="item">
          <text class="note">收货地址：</text>
          <text class="detail">{{address.addStr}}</text>
        </view>
      </block>
      <block wx:else>
        <view class="address-add-btn" @tap="addAddress">+ 新增地址</view>
      </block>
      <image class="address-border" src="/assets/images/cart_border@2x.png" alt="" />
    </view>
  </Address>
  <view class="divider"></view>
  <view class="order-list">
    <block wx:for="{{order}}" wx:key="goods_id">
      <view class="product-item">
        <navigator url="/pages/goods_detail?goods_id={{item.goods_id}}" class="product-left">
          <image class="product-img image-holder" src="{{item.goods_small_logo}}" />
        </navigator>
        <view class="product-right">
          <navigator url="/pages/goods_detail?goods_id={{item.goods_id}}" class="product-name">
          {{item.goods_name}}
          </navigator>
          <view class="product-price">
            <text class="product-price-symbol">￥</text>
            <text class="product-price-integer">{{item.goods_price}}</text>
            <text class="product-price-decimal">.00</text>
          </view>
          <view class="product-count">x{{item.goods_num}}</view>
        </view>
      </view>
    </block>
    <view class="order-cell">
      项目测试使用，支付成功后我们不会为您发货
    </view>
  </view>
  <view class="divider"></view>
  <view class="order-total">
    <view class="order-total-item">
      <view class="order-total-item-left">商品金额</view>
      <view class="order-total-item-right">￥{{total}}</view>
    </view>
    <view class="order-total-item">
      <view class="order-total-item-left">运费</view>
      <view class="order-total-item-right">+￥6.00</view>
    </view>
  </view>
  <view class="order-pay">
    <view class="order-pay-head">实付金额：<text class="order-pay-total">￥{{total + 6}}</text></view>
    <!--
      11.0.1 微信登录授权按钮
      微信已经废除 wx.getUserInfo 这个接口，现在只能通过按钮，获取用户的登录信息
      11.0.2  open-type="getUserInfo" 指定按钮开放能力为获取用户信息
      11.0.3  配合  bindgetuserinfo 事件获取获取用户信息
    -->
    <!-- 11.0.9.3 通过 token 判断切换显示登录按钮还是下单按钮 -->
    <!-- <block  wx:if="{{ !token }}" > -->
      <button wx:if="{{!token}}" class="login-btn" open-type="getUserInfo" @getuserinfo="getUserInfo">点击登录后下单</button>
    <!-- </block> -->
    <!-- <block wx:else> -->
      <view wx:else class="login-btn order-pay-btn" @tap="payMoney">微信支付</view>
    <!-- </block> -->
  </view>

</template>

<script>
import wepy from 'wepy'
import fetch from '../utils/fetch.js'
export default class CartOrder extends wepy.page {
  config = {
    navigationBarTitleText: '确认订单',
    backgroundColor: '#fff'
  }
  data = {
    order: [],
    address: {},
    token: ''
  }
  getOrder() {
    this.order = wepy.getStorageSync('cart')
  }
  getAddress() {
    this.address = wepy.getStorageSync('address')
    if (!this.address) return
    let {provinceName, cityName, countyName, detailInfo} = this.address
    this.address.addStr = `${provinceName + cityName + countyName + detailInfo}`
  }
  getToken() {
    this.token = wepy.getStorageSync('token')
  }
  onShow() {
    this.getOrder()
    this.getAddress()
    this.getToken()
  }
  computed = {
    total() {
      return this.order.reduce((total, item) => total + item.goods_num * item.goods_price, 0)
    }
  }
  methods = {
    async addAddress() {
      let res = await wepy.chooseAddress()
      this.address = res
      wepy.setStorageSync('address', res)
      let {provinceName, cityName, countyName, detailInfo} = this.address
      this.address.addStr = `${provinceName + cityName + countyName + detailInfo}`
      this.$apply()
    },
    async getUserInfo(e) {
      let rowdata = JSON.parse(e.detail.rawData)
      wepy.setStorageSync('rowdata', rowdata)
      let {encryptedData, iv, rawData, signature} = e.detail
      let resCode = await wepy.login()
      let code = resCode.code
      const data = {
        encryptedData,
        iv,
        rawData,
        signature,
        code
      }
      let resLogin = await fetch({
        url: 'users/wxlogin',
        method: 'POST',
        data,
        type: 'locale'
      })
      console.log(resLogin)
      this.token = resLogin.data.data.token
      wepy.setStorageSync('token', resLogin.data.data.token)
      wepy.showToast({
        title: '登录成功'
      })
      this.$apply()
    },
    async payMoney() {
      let orderPrice = this.total + 6
      let consigneeAddr = this.address.addStr
      if (!consigneeAddr) {
        wepy.showToast({
          title: '请先选择收货地址',
          icon: 'none'
        })
        return
      }
      let orderDetail = JSON.stringify(this.order)
      let goods = this.order.map(item => {
        return {
          goods_id: item.goods_id,
          goods_number: item.goods_num,
          goods_price: item.goods_price
        }
      })
      let data = {
        order_price: orderPrice,
        consignee_addr: consigneeAddr,
        order_detail: orderDetail,
        goods
      }
      let createOrder = await fetch({
        url: 'my/orders/create',
        method: 'POST',
        type: 'locale',
        data: data
      })
      let orderNumber = createOrder.data.data.order_number
      let preventPay = await fetch({
        url: 'my/orders/req_unifiedorder',
        method: 'POST',
        type: 'locale',
        data: {
          order_number: orderNumber
        }
      })
      console.log(preventPay)
    }
  }
}
</script>
<style lang="less">
page {
  background-color: #fff;
}
.divider {
  background-color: #f4f4f4;
}
.address {
  &-info {
    height: 222rpx;
    padding-bottom: 15rpx;
    box-sizing: border-box;
    position: relative;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    align-content: center;
    justify-content: span;
    .space-between {
      justify-content: space-between;
    }
    .item {
      padding: 22rpx 16rpx;
      display: flex;
      flex-wrap: wrap;
      font-size: 32rpx;
      line-height: 1.3;

      .note {
        width: 160rpx;
      }
      .detail {
        max-width: 560rpx;
      }
      .address-phone {
        margin-right: 82rpx;
      }
      .icon-jiantouyou {
        position: absolute;
        right: 10rpx;
      }
      .icon-jiantouyou:before {
        font-size: 24rpx;
        color: #999;
        line-height: 1;
        width: 15rpx;
        height: 25rpx;
      }
    }
  }
  &-border {
    width: 750rpx;
    height: 15rpx;
    position: absolute;
    bottom: 0;
    left: 0;
  }
  &-add {
    height: 222rpx;
    &-btn {
      width: 360rpx;
      height: 80rpx;
      background-color: #f4f4f4;
      border-radius: 5rpx;
      color: #ccc;
      font-size: 32rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

.product {
  &-item {
    display: flex;
    padding: 30rpx 20rpx;
    position: relative;
    &::after {
      content: '';
      position: absolute;
      left: 20rpx;
      right: 0;
      bottom: 0;
      border-bottom: 1rpx solid #ddd;
    }
  }
  &-left {
    margin-right: 26rpx;
    &,
    .product-img {
      width: 200rpx;
      height: 200rpx;
      background-color: #eee;
    }
  }
  &-right {
    width: 480rpx;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
  }
  &-name {
    height: 84rpx;
    font-size: 30rpx;
    line-height: 1.4;
    /* 多行文字隐藏省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  &-price {
    color: #ff2d4a;
    &-symbol,
    &-decimal {
      font-size: 28rpx;
    }
    &-integer {
      font-size: 44rpx;
    }
  }
  &-count {
    position: absolute;
    right: 0;
    bottom: 0;
    letter-spacing: 2rpx;
    color: #999;
  }
}

.order {
  &-list {
    background-color: #fff;
  }
  &-total-item {
    height: 60rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    &-right {
      color: #ff2d4a;
    }
  }
  &-cell {
    height: 88rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    align-items: center;
    position: relative;
    font-size:30rpx;
    color:red;
    justify-content: space-between;
    &::after {
      content: '';
      position: absolute;
      border-top: 1rpx solid #ddd;
      left: 20rpx;
      right: 20rpx;
      top: -1rpx;
    }
    .btn-line {
      border: 2rpx solid #999;
      border-radius: 5rpx;
      width: 156rpx;
      height: 56rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-left: 40rpx;
    }
    .btn-color-main {
      color: #ff2d4a;
    }
  }
  &-pay {
    background-color: #fff;
    padding: 20rpx 20rpx 60rpx;
    font-size: 30rpx;
    text-align: right;
    &-head {
      margin-bottom: 20rpx;
    }
    &-total {
      color: #ff2d4a;
    }
    &-btn,
    .login-btn {
      background-color: #00c000;
      display: flex;
      height: 80rpx;
      justify-content: center;
      align-items: center;
      color: #fff;
      font-size: 30rpx;
      border-radius: 5rpx;
      margin-bottom: 20rpx;
      &.disabled {
        background-color: #ddd;
      }
    }
  }
}
</style>
